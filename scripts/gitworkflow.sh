#!/usr/bin/env bash
# -----------------------------------------------------------------------------
#  gitworkflow.sh  –  Zero-config semantic-release, commitlint & Husky
#  Created by arizmuajianisan
#  v1.0.0  –  Safe for CI or humans
# -----------------------------------------------------------------------------
set -euo pipefail

SCRIPT_NAME="gitworkflow"
VERSION="1.0.0"
AUTHOR="arizmuajianisan"
RELEASE_URL="https://github.com/arizmuajianisan/gitworkflow/releases/download/v${VERSION}/gitworkflow.sh"
SHA_URL="${RELEASE_URL}.sha256"

# ------------------------------------------------------------------
# 0.  Helpers
# ------------------------------------------------------------------
GREEN='\033[0;32m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; CYAN='\033[0;36m'; NC='\033[0m'

log()  { echo -e "${GREEN}[INFO]${NC} $*"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $*" >&2; }
die()  { echo -e "${RED}[ERROR]${NC} $*" >&2; exit 1; }

command_exists() { command -v "$1" >/dev/null 2>&1; }

# ------------------------------------------------------------------
# 1.  CLI flags
# ------------------------------------------------------------------
NON_INTERACTIVE=0
WORKSPACE="."
while [[ $# -gt 0 ]]; do
  case $1 in
    -y|--yes)        NON_INTERACTIVE=1 ;;
    -w|--workspace)  WORKSPACE="$2"; shift ;;
    --verify)        VERIFY_CHECKSUM=1 ;;
    -h|--help) cat <<EOF
Usage: gitworkflow [flags]
  -y, --yes          skip interactive prompts
  -w, --workspace    target workspace directory (monorepo)
  --verify           verify SHA-256 checksum before running
  -h, --help         show this help
EOF
      exit 0 ;;
    *) die "Unknown flag: $1" ;;
  esac
  shift
done

cd "$WORKSPACE"

# ------------------------------------------------------------------
# 2.  Verification (optional)
# ------------------------------------------------------------------
if [[ "${VERIFY_CHECKSUM:-0}" == "1" ]]; then
  log "Verifying checksum …"
  curl -fsSL "$SHA_URL" | sha256sum -c - || die "Checksum mismatch – aborting"
fi

# ------------------------------------------------------------------
# 3.  Environment validation
# ------------------------------------------------------------------
log "Environment check …"
command_exists node || die "Node.js ≥ 18 required. Install from https://nodejs.org"
NODE_VERSION=$(node -v | sed -E 's/v//')
IFS=. read -r major minor patch <<< "$NODE_VERSION"
if (( major < 18 )); then
  die "Node.js ≥ 18 required (found $NODE_VERSION)"
fi
command_exists npm || die "npm not found"

PKG_MANAGER="npm"
[[ -f yarn.lock ]] && PKG_MANAGER="yarn"
[[ -f pnpm-lock.yaml ]] && PKG_MANAGER="pnpm"
log "Using package manager: $PKG_MANAGER"

# ------------------------------------------------------------------
# 4.  Package.json & Git
# ------------------------------------------------------------------
if [[ ! -f package.json ]]; then
  log "Creating minimal package.json …"
  cat > package.json <<EOF
{
  "name": "gitworkflow",
  "version": "1.0.0",
  "private": true,
  "description": "Auto-generated by ${SCRIPT_NAME}",
  "scripts": {},
  "keywords": ["git", "workflow", "commitlint", "husky", "release-it"],
  "author": "${AUTHOR}",
  "license": "MIT"
}
EOF
fi

if [[ ! -d .git ]]; then
  log "Initialising Git repo …"
  git init
  warn "Remember: git remote add origin <url>"
fi

# ------------------------------------------------------------------
# 5.  Dependency installation (idempotent)
# ------------------------------------------------------------------
DEPS=(
  "@commitlint/cli"
  "@commitlint/config-conventional"
  "husky"
  "lint-staged"
  "release-it"
  "@release-it/conventional-changelog"
  "dotenv-cli"
)
log "Installing dependencies …"
for dep in "${DEPS[@]}"; do
  $PKG_MANAGER list --depth=0 --dev "$dep" >/dev/null 2>&1 || \
    $PKG_MANAGER add -D "$dep"
done

# ------------------------------------------------------------------
# 6.  Configuration files
# ------------------------------------------------------------------
log "Writing configuration …"

cat > commitlint.config.js <<'EOF'
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [2, 'always', [
      'build',
      'chore',
      'ci',
      'docs',
      'feat',
      'fix',
      'perf',
      'refactor',
      'revert',
      'style',
      'test'
    ]],
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never'],
    'scope-case': [2, 'always', 'lower-case'],
    'subject-case': [2, 'always', 'sentence-case'],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'header-max-length': [2, 'always', 100],
    'body-leading-blank': [1, 'always'],
    'footer-leading-blank': [1, 'always']
  }
};
EOF

cat > .release-it.json <<'EOF'
{
  "$schema": "https://unpkg.com/release-it@17/schema/release-it.json",
  "git": {
    "commitMessage": "chore(release): ${version}",
    "tagName": "v${version}",
    "requireBranch": "main",
    "requireCleanWorkingDir": true,
    "requireUpstream": true,
  },
  "github": {
    "release": true,
    "releaseName": "v${version}",
    "tokenRef": "GITHUB_TOKEN"
  },
  "npm": {
    "publish": false,
    "tag": "latest",
    "registry": "https://registry.npmjs.org/",
    "tokenRef": "NPM_TOKEN",
    "publishConfig": {
      "access": "public"
    }
  },
  "plugins": {
    "@release-it/conventional-changelog": {
      "preset": "conventionalcommits",
      "infile": "CHANGELOG.md",
      "header": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
      "types": [
        { "type": "feat", "section": "✨ Features" },
        { "type": "fix", "section": "🐛 Bug Fixes" },
        { "type": "docs", "section": "📝 Documentation" },
        { "type": "style", "section": "💄 Styles" },
        { "type": "refactor", "section": "♻️ Code Refactoring" },
        { "type": "perf", "section": "⚡ Performance Improvements" },
        { "type": "test", "section": "✅ Tests" },
        { "type": "build", "section": "📦 Build System" },
        { "type": "ci", "section": "🔧 CI Configuration" },
        { "type": "chore", "section": "🔨 Chores" }
      ]
    }
  }
}
EOF

cat > .lintstagedrc.json <<'EOF'
{
  "*.{js,ts,json,md}": ["prettier --write"]
}
EOF

# ----------------------------------------------------------
# Ask whether to keep or drop Prettier in lint-staged
# ----------------------------------------------------------
PRETTIER_WANTED=true
if [[ "$NON_INTERACTIVE" == 0 ]]; then
  read -rp "Add Prettier to lint-staged? [Y/n] " yn
  case "$yn" in
    [Nn]*) PRETTIER_WANTED=false ;;
  esac
fi

# install prettier **after** the prompt
[[ "$PRETTIER_WANTED" == true ]] && \
  { log "Installing prettier …"; $PKG_MANAGER list prettier --depth=0 >/dev/null 2>&1 || $PKG_MANAGER add -D prettier; }

if [[ "$PRETTIER_WANTED" == false ]]; then
  log "Removing Prettier line from .lintstagedrc.json"
  # keep the file but empty the task array so lint-staged becomes a no-op
  echo "{}" > .lintstagedrc.json
else
  log "Keeping Prettier in lint-staged; will install prettier later"
fi

# -------------------------------
# 7. Husky v9+ (no deprecated lines)
# -------------------------------
log "Setting up Husky …"
npx husky init >/dev/null

# Husky’s init already created .husky/pre-commit with the NEW format
# (single line: npx lint-staged). If it still contains the old boilerplate,
# overwrite it:

cat > .husky/pre-commit <<'EOF'
npx --no-install lint-staged
EOF

cat > .husky/commit-msg <<'EOF'
npx --no-install commitlint --edit "$1"
EOF

# ------------------------------------------------------------------
# 8.  Scripts & dotenv
# ------------------------------------------------------------------
log "Patching package.json scripts …"
node <<'NODE'
const fs = require('fs');
const pkg = JSON.parse(fs.readFileSync('package.json','utf8'));
pkg.scripts = {
  ...pkg.scripts,
  release: "dotenv -e .env -- release-it",
  prepare: "husky"
};
fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
NODE

if [[ ! -f .env ]]; then
  token=""
  if [[ $NON_INTERACTIVE == 0 ]]; then
    read -rp "Paste GitHub PAT (hidden): " -s token; echo
  else
    token="ADD_YOUR_TOKEN_HERE"
  fi
  cat > .env <<EOF
# GitHub Personal Access Token (classic or fine-grained)
GITHUB_TOKEN=${token}
EOF
  warn "Remember to populate GITHUB_TOKEN in .env"
fi

# .gitignore
grep -qxF "node_modules/" .gitignore 2>/dev/null || echo "node_modules/" >> .gitignore
grep -qxF ".env" .gitignore 2>/dev/null || echo ".env" >> .gitignore

# ------------------------------------------------------------------
# 9.  Post-install instructions
# ------------------------------------------------------------------
log "✅  Setup complete!"
cat <<EOF

Next steps:
  1. git remote add origin <your-repo>
  2. git add .
  3. git commit -m "feat: initial commit"
  4. npm run release
EOF